# $Id: chapter6.R,v 1.4 2009/06/24 14:41:59 nhorton Exp $

###################################################
### Analytic power calculation (section 6.1.1)
###################################################
# find sample size for two-sample t-test
power.t.test(delta=0.5, power=0.9)

# find power for two-sample t-test
power.t.test(delta=0.5, n=100)


###################################################
### Empirical power calculation (section 6.1.2)
###################################################
library(MASS)
library(nlme)
# initialize parameters and building blocks
effect <- 0.35    # effect size
corr <- 0.4       # intrafamilial correlation
numsim <- 1000
n1fam <- 50       # families with 3 exposed
n2fam <- 50       # families with 1 exposed and 2 unexposed
vmat <- matrix(c  # 3x3 compound symmetry correlation
   (1,    corr, corr,
    corr, 1   , corr,
    corr, corr, 1    ), 3, 3)

# 1 1 1 ... 1 0 0 0 ... 0
x <- c(rep(1, n1fam), rep(1, n1fam), rep(1, n1fam),
       rep(1, n2fam), rep(0, n2fam), rep(0, n2fam))
# 1 2 ... n1fam 1 2 ... n1fam ...
id <- c(1:n1fam, 1:n1fam, 1:n1fam,
   (n1fam+1:n2fam), (n1fam+1:n2fam), (n1fam+1:n2fam))
power <- rep(0, numsim) # initialize vector for results

for (i in 1:numsim) {
   cat(i," ")
   # all three exposed
   grp1 <- mvrnorm(n1fam, c(effect, effect, effect), vmat)

   # only first exposed
   grp2 <- mvrnorm(n2fam, c(effect, 0,      0),      vmat)

   # concatenate the output vector
   y <- c(grp1[,1], grp1[,2], grp1[,3],
          grp2[,1], grp2[,2], grp2[,3])

   group <- groupedData(y ~ x | id)   # specify dependence structure
   res <- lme(group, random = ~ 1)    # fit random intercept model
   pval <- summary(res)$tTable[2,5]   # grab results for main parameter
   power[i] <- pval<=0.05             # is it statistically significant?
}

cat("\nEmpirical power for effect size of ", effect,
   " is ", round(sum(power)/numsim,3), ".\n", sep="")
cat("95% confidence interval is",
   round(prop.test(sum(power), numsim)$conf.int, 3), "\n")


###################################################
### Generate data from generalized linear random effects model (section 6.2)
###################################################
library(lme4)
n <- 1500; p <- 3; sigbsq <- 4
beta <- c(-2, 1.5, 0.5, -1)
id <- rep(1:n, each=p)   # 1 1 ... 1 2 2 ... 2 ... n
x1 <- as.numeric(id < (n+1)/2)  # 1 1 ... 1 0 0 ... 0
randint <- rep(rnorm(n, 0, sqrt(sigbsq)), each=p)
x2 <- rep(1:p, n)        # 1 2 ... p 1 2 ... p ...
x3 <- runif(p*n)
linpred <- beta[1] + beta[2]*x1 + beta[3]*x2 + beta[4]*x3 + randint
expit <- exp(linpred)/(1 + exp(linpred))
y <- runif(p*n) < expit

glmmres <- lmer(y ~ x1 + x2 + x3 + (1|id), family=binomial(link="logit"))
summary(glmmres)




###################################################
### Generate correlated binary data (section 6.3)
###################################################
p1 <- .15; p2 <- .25; corr <- .4; n <- 10000
p1p2 <- corr*sqrt(p1*(1-p1)*p2*(1-p2)) + p1*p2
library(Hmisc)
vals <- rMultinom(matrix(c(1-p1-p2+p1p2, p1-p1p2, p2-p1p2, p1p2), 1, 4), n)
y1 <- rep(0, n); y2 <- rep(0, n)   # put zeroes everywhere
y1[vals==2 | vals==4] <- 1         # and replace them with ones
y2[vals==3 | vals==4] <- 1         # where needed
rm(vals, p1, p2, p1p2, corr, n)    # cleanup
cor(y1, y2)
mean(y1)
mean(y2)




###################################################
### Read variable format files and plot maps (section 6.4)
###################################################
# read in the data
input <- readLines("http://www.math.smith.edu/sasr/datasets/co25_d00.dat",
   n=-1)
# figure out how many counties, and how many entries
num <- length(grep("END", input))
allvals <- length(input)
numentries <- allvals-num
# create vectors to store data
county <- numeric(numentries); lat <- numeric(numentries)
long <- numeric(numentries)

curval <- 0   # number of counties seen so far
# loop through each line
for (i in 1:allvals) {
   if (input[i]=="END") {
      curval <- curval + 1
   } else {
      # remove extraneous spaces
      nospace <- gsub("[ ]+", " ", input[i])
      # remove space in first column
      nospace <- gsub("^ ", "", nospace)
      splitstring <- as.numeric(strsplit(nospace, " ")[[1]])
      len <- length(splitstring)
      if (len==3) {  # new county
         curcounty <- splitstring[1]; county[i-curval] <- curcounty
         lat[i-curval] <- splitstring[2]; long[i-curval] <- splitstring[3]
      } else if (len==2) { # continue current county
         county[i-curval] <- curcounty; lat[i-curval] <- splitstring[1]
         long[i-curval] <- splitstring[2]
      }
   }
}

# read county names
countynames <-
   read.table("http://www.math.smith.edu/sasr/datasets/co25_d00a.dat",
   header=FALSE)
names(countynames) <- c("county", "countyname")

xvals <- c(min(lat), max(lat))
yvals <- c(range(long))
#pdf("massachusettsmap.pdf")
plot(xvals, yvals, pch=" ", xlab="", ylab="", xaxt="n", yaxt="n")
counties <- unique(county)
for (i in 1:length(counties)) {
   # first element is an internal point
   polygon(lat[county==counties[i]][-1], long[county==counties[i]][-1])
   # plot name of county using internal point
   text(lat[county==counties[i]][1], long[county==counties[i]][1],
      countynames$countyname[i])
}
#dev.off()


###################################################
### Missing data (section 6.5)
###################################################
ds <- read.csv("http://www.math.smith.edu/sasr/datasets/helpmiss.csv")
smallds <- with(ds, data.frame(homeless, female, i1, sexrisk, indtot, mcs, pcs))
summary(smallds)
library(Hmisc)
na.pattern(smallds)
library(mice)
imp <- mice(smallds, m=25, maxit=25, seed=42)
summary(imp)


###################################################
### Bayesian Poisson regression (section 6.6)
###################################################
ds <- read.csv("http://www.math.smith.edu/sasr/datasets/help.csv")
attach(ds)
library(MCMCpack)
posterior <- MCMCpoisson(i1 ~ female + as.factor(substance) + age)
summary(posterior)


###################################################
### chunk number 1: 
###################################################
options(digits=3)

# R code has been edited to facilitate reading data from the web
ds <- read.csv("http://www.math.smith.edu/sasr/datasets/help.csv")
#load("savedfile")
attach(ds)

# uncomment next line to pause between plots 
#devAskNewPage(ask=TRUE)

options(show.signif.stars=FALSE)


###################################################
### chunk number 2: 
###################################################
library(multilevel)
cronbach(cbind(f1a, f1b, f1c, f1d, f1e, f1f, f1g, f1h, f1i, f1j, f1k,
   f1l, f1m, f1n, f1o, f1p, f1q, f1r, f1s, f1t))


###################################################
### chunk number 3: 
###################################################
res <- factanal(~ f1a + f1b + f1c + f1d + f1e + f1f + f1g + f1h +
   f1i + f1j + f1k + f1l + f1m + f1n + f1o + f1p + f1q + f1r +
   f1s + f1t, factors=3, rotation="varimax", na.action=na.omit,
   scores="regression")
print(res, cutoff=0.45, sort=TRUE)


###################################################
### chunk number 4: 
###################################################
library(rpart)
sub <- as.factor(substance)
homeless.rpart <- rpart(homeless ~ female + i1 + sub + sexrisk + mcs + 
    pcs, method="class", data=ds)
printcp(homeless.rpart)


###################################################
### chunk number 6: rpart
###################################################
plot(homeless.rpart)
text(homeless.rpart)


###################################################
### chunk number 7: 
###################################################
home <- homeless[i1<3.5]
pcslow <- pcs[i1<3.5]<=31.94
table(home, pcslow)
rm(home, pcslow)


###################################################
### chunk number 8: lda
###################################################
library(MASS)
ngroups <- length(unique(homeless))
ldamodel <- lda(homeless ~ age + cesd + mcs + pcs, 
   prior=rep(1/ngroups, ngroups))
print(ldamodel)


###################################################
### chunk number 10: ldaplot
###################################################
plot(ldamodel)


###################################################
### chunk number 11: clustersetup
###################################################
cormat <- cor(cbind(mcs, pcs, cesd, i1, sexrisk), 
   use="pairwise.complete.obs")
hclustobj <- hclust(dist(cormat))


###################################################
### chunk number 13: clustplot
###################################################
plot(hclustobj)


